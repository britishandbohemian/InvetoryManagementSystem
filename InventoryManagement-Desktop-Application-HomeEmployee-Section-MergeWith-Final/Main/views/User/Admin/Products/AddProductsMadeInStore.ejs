<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="/css/styles.css">

    <!-- Font Awesome -->

    <title>
        Add Product
    </title>
    <style>
        #popupFormSupplier,
        #popupFormCategory,
        #popupFormComponent {
            display: none;
            /* Initially hide the popup */
            position: fixed;
            /* Fixed position */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        .form-container {
            background-color: #fefefe;
            margin: 1rem auto;
            /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            /* Could be more or less, depending on screen size */
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
            transition: 0.3s;
        }

        .modal.show {
            display: block;
        }
    </style>


</head>

<body>


    <%- include('../NavbarAdmin') %>




        <!-- Where all my content is -->
        <div class="main-content" style="background-color: #fcfcfc;">

            <div class="shadowNav" style="    
            z-index: 2;
            background-color: #fcfcfc;
      height: 5rem;
            display: grid;
            grid-template-columns: 60% 1fr;
      align-items: center;
            flex-direction: row;
            position: fixed;
            width: 100%;
            justify-content: left;
      border: 1px solid 1px solid rgb(230 230 230);
      
      ">
                <h6 style="   font-weight: 800;
            font-size: 1.5em;
            padding-left: 5rem;">Add Product Made In Store

                </h6>




            </div>



            <!-- Inputs -->
            <div style="padding: 5rem; display: grid;grid-template-columns: 49% 49%;">








                <!-- Header For Page -->


                <!-- Product Inputs -->
                <div style="padding: 3rem;">

                    <!-- Span Products icon -->
                    <div style="display: flex;justify-content: center;"><span style="font-size: 4rem;"
                            class="material-symbols-outlined">
                            barcode_scanner
                        </span></div>



                    <!-- Inputs -->
                    <div style="display: flex;flex-direction: column;">

                        <form action="" id="productForm">
                            <label for="productName">Product Name:</label>
                            <input class="form-control" type="text" id="productName" name="productName"
                                placeholder="Product Name" required>

                            <label style="margin-top: 10px;" for="productMarkup">Product Markup:</label>
                            <input class="form-control" type="number" id="productMarkup" name="productMarkup"
                                placeholder="markup" required>





                            <!-- Ingredients  -->
                            <div style="margin-top: 1rem;">
                                <label for="">Select Ingredients </label>
                                <select class="form-control" name="components" id="components">
                                    <% Components.forEach(component=> { %>
                                        <option value="<%= component.itemId %>">
                                            <%= component.itemName %> : <%= component.pricePerPiece %>
                                        </option>
                                        <% }) %>
                                </select>


                                <ul style="margin-top: 1rem;" id="ComponentsList"></ul> <!-- Changed to ul -->

                                <button class="btn" type="button" onclick='addSelectedIngredient()'>Add Selected
                                    ingredients</button>

                            </div>

                            <br>

                            <label style="margin-top: 10px;" for="productMarkup">Product Recommended Selling
                                Price:</label>
                            <input class="form-control" type="number" id="productSellingPrice"
                                name="productSellingPrice" placeholder="Selling Price" required>
                            <!-- Category -->
                            <div style="margin-top: 1rem;">
                                <label for="category">Select A Category:</label>
                                <select class="form-control" name="category" id="categoryProduct">
                                    <% Categories.forEach(category=> { %>
                                        <option value="<%= category.categoryId %>">
                                            <%= category.categoryName %>
                                        </option>
                                        <% }) %>
                                </select>

                            </div>

                            <br>
                            <button class="btn" style="margin-top: 10px;" type="button" onclick="addProduct()">Add
                                To
                                List</button>
                        </form>
                    </div>
                </div>

                <!-- Div On right -->
                <!-- List Of Prodcuts to add to Inventory -->
                <div style="padding: 3rem;display: grid;grid-template-rows: 1fr 80% 1fr;">

                    <div><span style="font-size: 4rem;display: flex;justify-content: center;"
                            class="material-symbols-outlined">
                            add_business
                        </span></div>
                    <div id="myTable" class="container" style="margin-left: 0;margin-top: 1rem;">
                        <div class="table-responsive custom-table-responsive">
                            <table class="table custom-table">
                                <thead>
                                    <tr>
                                        <th scope="col">

                                            </label>
                                        </th>
                                        <th scope="col">Product Name</th>
                                        <th scope="col">Category</th>
                                        <th scope="col">Selling Price
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>

                                </tbody>
                            </table>
                        </div>
                    </div>


                    <div> <button style="margin-top: 20px;margin-left: 1rem;" class="btn"
                            onclick="addProductsToStore()">Add to My
                            Store</button></div>


                </div>
            </div>

        </div>



        </div>



        <!-- Success Modal -->
        <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="alertModalLabel">Alert</h5>
                        <button type="button" class="close" onclick="closeAlertModal()" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="alertModalBody">
                        Message goes here...
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="closeAlertModal()">Close</button>
                    </div>
                </div>
            </div>
        </div>


        <script>
            function showAlertModal(title, message) {
                // Set the modal's title and message
                document.getElementById('alertModalLabel').innerText = title;
                document.getElementById('alertModalBody').innerText = message;

                // Display the modal
                var modal = document.getElementById('alertModal');
                modal.style.display = 'block';
                modal.classList.add('show');
                document.body.classList.add('modal-open');
            }

            function closeAlertModal() {
                var modal = document.getElementById('alertModal');
                modal.style.display = 'none';
                modal.classList.remove('show');
                document.body.classList.remove('modal-open');
            }


            // Event listener for productName input
            document.getElementById('productName').addEventListener('input', function () {
                if (this.value) {
                    this.style.borderColor = ''; // Set to default color
                } else {
                    this.style.borderColor = 'red';
                }
            });

            // Event listener for productMarkup input
            document.getElementById('productMarkup').addEventListener('input', function () {
                if (this.value) {
                    this.style.borderColor = ''; // Set to default color
                } else {
                    this.style.borderColor = 'red';
                }
            });


            // Function to add a selected component to the list and array
            var ComponentsArr = JSON.parse('<%- JSON.stringify(Components) %>');

            // Products Array
            let products = []
            // The Model To Support The Product
            let ProductModel = {
                "categoryId": 0,
                "productSellingPrice": 0,
                "productName": "string",
                "productCostPrice": 0,
                "productMarkup": 0,
                "status": 0,
                "componentIds": [
                    0
                ]
            }
            function addSelectedIngredient() {
                event.preventDefault();

                // Get the selected component
                let componentsDropdown = document.getElementById('components');
                let selectedComponentId = parseInt(componentsDropdown.value);

                console.log("Selected Component ID:", selectedComponentId); // Debugging statement

                // Look through the ComponentsArr array to find the selected component by ID
                let selectedComponent = ComponentsArr.find(comp => comp.itemId === selectedComponentId);

                console.log("Selected Component:", selectedComponent); // Debugging statement

                if (!selectedComponent) {
                    console.error("No component found with the selected ID.");
                    return;
                }

                // Check if the component is already added to the list
                let componentsList = document.getElementById('ComponentsList');
                for (let li of componentsList.children) {
                    if (li.textContent === selectedComponent.itemName) {
                        console.error("Component is already added to the list.");
                        return;
                    }
                }

                // Append the selected component to the "ComponentsList" ul
                let newLi = document.createElement('li');
                newLi.textContent = selectedComponent.itemName;
                componentsList.appendChild(newLi);

                // Calculate the total cost of all selected ingredients
                let totalCost = 0;
                for (let li of componentsList.children) {
                    let componentName = li.textContent;
                    let component = ComponentsArr.find(comp => comp.itemName === componentName);
                    if (component) {
                        totalCost += component.pricePerPiece;
                    }
                }

                // Get the markup value
                let markupValue = parseFloat(document.getElementById('productMarkup').value) / 100;

                // Check if the markup value is filled
                if (isNaN(markupValue)) {
                    console.error("Please fill in the markup value.");
                    return;
                }

                // Calculate the selling price
                let sellingPrice = totalCost * (1 + markupValue);

                // Update the productSellingPrice input field
                document.getElementById('productSellingPrice').value = sellingPrice.toFixed(2); // Rounded to 2 decimal places
            }

            // Function to add product to the products array


            function addProduct() {


                // Get values from the form
                let productNameInput = document.getElementById('productName');
                let productName = productNameInput.value;

                let productMarkupInput = document.getElementById('productMarkup');
                let productMarkup = parseFloat(productMarkupInput.value);

                // Reset input styles
                productNameInput.style.borderColor = '';
                productMarkupInput.style.borderColor = '';

                // Validation: Check if all fields are filled
                if (!productName) {
                    console.error("Product Name is required.");
                    productNameInput.focus(); // Make the input active
                    productNameInput.style.borderColor = 'red'; // Highlight in red
                    return;
                }

                if (isNaN(productMarkup)) {
                    console.error("Product Markup is required.");
                    productMarkupInput.focus(); // Make the input active
                    productMarkupInput.style.borderColor = 'red'; // Highlight in red
                    return;
                }

                // Get the selected category ID from the dropdown
                let categoryId = parseInt(document.getElementById('categoryProduct').value);

                // Calculate the selling price based on the markup
                // Loop through the "ComponentsList" ul and get the selected components
                let componentsList = document.getElementById('ComponentsList');
                let totalCostPrice = 0; // Initialize the variable here
                for (let li of componentsList.children) {
                    let componentName = li.textContent;
                    let component = ComponentsArr.find(comp => comp.itemName === componentName);
                    if (component) totalCostPrice += component.pricePerPiece;
                }

                // Calculate the selling price based on the markup
                let productMarkupValue = productMarkup / 100;
                let sellingPrice = Math.round((totalCostPrice * (1 + productMarkupValue)) * 100) / 100;

                // If totalCostPrice is NaN or 0, use the productSellingPrice input value
                if (isNaN(totalCostPrice) || totalCostPrice === 0) {
                    let productSellingPriceInput = document.getElementById('productSellingPrice');
                    sellingPrice = parseFloat(productSellingPriceInput.value);
                }

                // Create a new product object
                let product = {
                    "categoryId": categoryId,
                    "productSellingPrice": sellingPrice,
                    "productName": productName,
                    "productMarkup": productMarkup,
                    "status": 1
                };

                // Check if no ingredients are selected
                if (componentsList.children.length === 0) {
                    showAlertModal('Error', 'No ingredients selected. Please select at least one ingredient.');
                    return;
                }

                // Add the product object to the products array
                products.push(product);

                // Append the product details to the "Products" table
                let productsTableBody = document.querySelector('#myTable tbody');
                let productRow = document.createElement('tr');
                productRow.innerHTML = `
        <td><i class="material-icons" onclick="removeProductFromList(this)">delete</i></td>
        <td>${product.productName}</td>
        <td>${product.categoryId}</td>
        <td>${product.productSellingPrice}</td>
    `;
                productsTableBody.appendChild(productRow);


                showAlertModal('Success', 'Product added successfully!');
            }

            function removeProductFromList(iconElement) {
                // Get the row of the clicked delete icon
                let row = iconElement.closest('tr');

                // Remove the row from the table
                row.remove();
            }

            function sendProducts() {
                // Map the products array to the expected DTO structure
                var productsToBeSent = products.map(product => {
                    return {
                        categoryId: product.categoryId,
                        productName: product.productName,
                        productMarkup: product.productMarkup,
                        supplierId: product.supplierId,
                        productCostPrice: 0,  // Default value
                        markupPercentage: product.productMarkup,
                        unitOfMeasurement: 0,  // Default value
                        minimumThreshold: 0,  // Default value
                        maximumThreshold: 0,  // Default value
                        sellByDate: new Date().toISOString(),
                        status: 0  // Default value
                    };
                });

                // Make a fetch request to send the products
                fetch("/AddProductsFromSupplier", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(productsToBeSent),
                })
                    .then(response => response.text())
                    .then(data => {
                        showSuccessModal();
                        setTimeout(function () {
                            window.location.href = "/ViewProducts";
                        }, 3000);
                    })
                    .catch(error => {
                        console.error("Error creating products:", error);
                    });
            }

            function addProductsToStore() {
                fetch('/AddProductsMadeInStore', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(products)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        console.log(response.text());
                    })
                    .then(data => {
                        // Handle the success case here, e.g., update the UI or show a success message
                        showSuccessModal();
                        setTimeout(function () {
                            window.location.href = "/ViewProducts";
                        }, 3000);

                    })
                    .catch(error => {
                        // Handle errors here
                        console.error('There was an error adding the products:', error);
                    });
            }

            function showSuccessModal() {
                var modal = document.getElementById('successModal');
                modal.style.display = 'block';
                modal.classList.add('show');
                document.body.classList.add('modal-open');
            }

            function closeSuccessModal() {
                var modal = document.getElementById('successModal');
                modal.style.display = 'none';
                modal.classList.remove('show');
                document.body.classList.remove('modal-open');
            }
        </script>

</body>

</html>