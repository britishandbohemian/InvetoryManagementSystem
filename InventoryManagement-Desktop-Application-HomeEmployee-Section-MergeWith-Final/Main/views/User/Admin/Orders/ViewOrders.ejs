<!DOCTYPE html>
<html lang="en">
<!-- Ignore This Styling -->

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=0.2">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
  <link rel="stylesheet" href="/css/styles.css">

  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />


  <title>View Orders</title>
  <style>
    .form-control {
      border: 1px solid black;
      border-bottom: 5px solid black;
    }



    .modal {
      padding-top: 3rem;
    }




    .custom-table-responsive {
      margin: 2rem;
      background-color: white !important;
      padding: 20px;
      border-radius: 15px;
    }

    #searchbar {
      position: fixed;
      width: 100%;
      z-index: 2;
      background-color: #fcfcfc;
      height: 11vh;
      display: grid;
      grid-template-columns: 60% 1fr;
      align-items: center;
      flex-direction: row;
      justify-content: left;
      padding-right: 4rem;
      border: 1px solid 1px solid rgb(230 230 230);
    }

    #searchbarInput {
      text-align: center;
      font-size: 0.8em;
      width: 100%;
      height: 2.3rem;
      background-color: #ececec;
      border: 1px #cfcfcf solid;
      border-radius: 24px;
      padding-left: 2.5rem;
    }
  </style>



</head>

<body>

  <%- include('../NavbarAdmin') %>

    <!-- Where all my content is -->
    <div class="main-content">

      <!-- Floating Bar  -->
      <div class="floating-btn-container" style="bottom: 8rem;right: 4rem">
        <button class="floating-btn" onclick="OpenModalProduct()" style="background-color: #f15e47;border: none;">
          <i class="material-icons"> fastfood</i>
        </button>
      </div>

      <!-- Floating Bar  -->
      <div class="floating-btn-container" style="bottom: 2rem;right: 4rem">
        <button class="floating-btn" onclick="OpenModal()"
          style="background: linear-gradient(to right, #22c1c3, #fdbb2d);border: none;">
          <i class="material-icons"> lunch_dining</i>
        </button>
      </div>



      <!-- Search Bar -->
      <!-- Search Bar -->
      <div class="shadowNav" id="searchbar">
        <h6 style="   font-weight: 800;
    font-size: 1.5em;
    padding-left: 5rem;">Supplier Orders

        </h6>

        <div style="display: flex;width: 100%;justify-content: right;">


          <div style="position: relative; width: 20vw; margin-right: 24rem;">
            <input class="shadowNav" id="searchbarInput" type="text" placeholder="Search Inventory">
            <i style="position: absolute; 
                    left: 1rem; 
                    top: 0.5rem; 
                    font-size: 0.8em;
                    color: rgb(158, 158, 158);" class="search-icon"><span style="font-size: 1.5em;"
                class="material-symbols-outlined">
                search
              </span></i>
          </div>



        </div>

      </div>




      <section style="margin-top:6rem; padding:  7rem 5rem;">




        <div style="       background: linear-gradient(to right, #22c1c3, #fdbb2d); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */;

        width: 300px;
        border-radius: 15px;
        height: 300px;
        display: flex;
        flex-direction: column;
        gap: 2rem;
        justify-content: center;
        align-items: left;
        padding: 3rem;">
          <span style="color: white;" class="material-symbols-outlined">
            Inventory
          </span>
          <H3 style="color: white;font-size: 1.5rem;">Most Reliable Supplier</H3>
          <h4 style="color: white;">
            Name
          </h4>
        </div>



        <div
          style="background-color: white;border-radius: 15px;border:  1px solid rgb(216, 216, 216);margin-bottom: 1REM;margin-top: 7rem;margin: 7rem auto;">

          <div style="padding: 1rem;padding-left: 4rem;padding-top: 2rem;">
            <h3 style="font-weight: bold;font-size: 1.5rem;">All Supplier Orders</h3>
            <h5 style="font-size: 1rem;font-weight: 400;margin-top: 20px;">Overview of all your supplier orders</h5>
          </div>

          <hr>

          <div style="margin-top:1rem " id="myTable" class="">
            <div class="table-responsive custom-table-responsive" style="width: fit-content;margin-left: 1rem;">
              <table class=" table custom-table">
                <thead>
                  <tr>
                    <th scope="col">
                      <label class="control control--checkbox">
                      </label>
                    </th>
                    <th scope="col">Action</th>
                    <th scope="col">Order ID</th>
                    <th scope="col">Total Cost</th>
                    <th scope="col">Order Date</th>
                    <th scope="col">Expected Delivery Date</th>
                    <th scope="col">Status</th>
                  </tr>
                </thead>
                <tbody>
                  <% Orders.forEach(order=> { %>
                    <tr scope="row">
                      <th scope="row">

                      </th>
                      <td style="display: flex;align-items: center;gap: 1rem;">
                        <a style="display: flex;align-items: center;" href="/ConfirmOrder/<%= order.supplierOrderId %>">
                          <span class="material-symbols-outlined">check</span>
                        </a>
                        |
                        <button style="display: flex;border: none;background-color: transparent;align-items: center;"
                          onclick="deleteSupplierOrder(<%= order.supplierOrderId %>)">
                          <span class="material-symbols-outlined">delete_sweep</span>
                        </button>
                      </td>
                      <td>
                        <%= order.supplierOrderId %>
                      </td>
                      <td>
                        <%= order.totalCostOfOrder %>
                      </td>
                      <td>
                        <%= order.orderDate %>
                      </td>
                      <td>
                        <%= order.expectedDeliveryDate %>
                      </td>
                      <td>
                        <script>
                          function getStatusText(statusNumber) {
                            const statuses = ['Pending', 'Shipped', 'Received', 'Cancelled'];
                            return statuses[statusNumber] || 'Unknown';
                          }
                          document.write(getStatusText(<%= order.status %>))</script>
                      </td>
                    </tr>
                    <tr class="spacer">
                      <td colspan="100"></td>
                    </tr>
                    <% }); %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </section>

      <div id="myModalProduct" class="modal">


        <div class="form-container" style="margin-top: 8rem;border-radius: 10px;margin:auto;">
          <form id="ProductOrderForm" method="post">
            <div style="display: flex;justify-content: right;">
              <i class="material-icons close-icon" onclick="CloseModalProduct()">close</i>

            </div>
            <label for="productId">Product:</label>
            <select class="form-control" id="productId" name="productId" required>
              <% Products.forEach(product=> { %>
                <option value="<%= product.productId %>">
                  <%= product.productName %>
                </option>
                <% }) %>
            </select><br><br>

            <div id="recommendationSection" class="border p-3 rounded mb-3" style="display: none;">
              <!-- Recommendation data will be populated here -->
            </div>

            <label for="unitsOrdered">Units Ordered:</label>
            <input class="form-control" type="number" id="unitsOrdered" name="unitsOrdered" required><br><br>



            <label for="piecesPerUnit">Pieces Per Unit</label>
            <input class="form-control" type="number" id="piecesPerUnit" name="piecesPerUnit" required><br><br>

            <label for="orderDate">Order Date:</label>
            <input class="form-control" type="datetime-local" id="orderDate" name="orderDate" required><br><br>


            <label for="totalCostOfOrder">Total Cost of Order:</label>
            <input class="form-control" type="number" step="0.01" id="totalCostOfOrder" name="totalCostOfOrder"
              required><br><br>


            <input class="btn" type="submit" value="Place Product Order">
          </form>
        </div>


      </div>

      <div id="myModalItem" class="modal">

        <div class="form-container" style="margin-top: 1rem;border-radius: 10px">
          <form id="ItemOrderForm" method="post">
            <div style="display: flex;justify-content: right;">
              <i class="material-icons close-icon" onclick="CloseModalItem()">close</i>
            </div>

            <label for="itemId">Item:</label>
            <select class="form-control" id="itemId" name="itemId" required>
              <% Items.forEach(item=> { %>
                <option value="<%= item.itemId %>">
                  <%= item.itemName %>
                </option>
                <% }) %>
            </select><br><br>

            <div id="itemRecommendationSection" class="border p-3 rounded mb-3" style="display: none;">
              <!-- Item Recommendation data will be populated here -->
            </div>



            <label for="unitsOrdered">Units Needed:</label>
            <input class="form-control" type="number" id="unitsOrdered" name="unitsOrdered" required><br><br>

            <label for="piecesPerUnit">Pieces Per Unit</label>
            <input class="form-control" type="number" id="piecesPerUnit" name="piecesPerUnit" required><br><br>
            <label for="totalCostOfOrder">Total Cost of Order:</label>
            <input class="form-control" type="number" step="0.01" id="totalCostOfOrder" name="totalCostOfOrder"
              required><br><br>

            <label for="orderDate">Order Date:</label>
            <input class="form-control" type="datetime-local" id="orderDate" name="orderDate" required><br><br>

            <input class="btn" type="submit" value="Place Item Order">
          </form>
        </div>

      </div>


      <div id="confirmOrder" class="modal">
        <div class="form-container" style="margin-top: 1rem;border:none; border-radius: 15px;border: 1px solid black;">

          <div style="display: flex;justify-content: right;">
            <i class="material-icons close-icon" onclick="CloseModalOrder()">close</i>
          </div>

          <h3 style="font-weight: bold;font-size: 1.5rem;">Create Supplier Order</h3>


          <form action="/submitSupplierOrder" method="POST">

            <!-- Supplier ID -->
            <label>Supplier:</label>
            <select class="form-control" name="SupplierId" id="SupplierId" required>
              <% Supplier.forEach(supplier=> { %>
                <option value="<%= supplier.supplierId %>">
                  <%= supplier.supplierName %>
                </option>
                <% }) %>
            </select>

            <!-- Total Cost of Order -->
            <label>Total Cost of Order:</label>
            <input class="form-control" type="text" name="TotalCostOfOrder" id="TotalCostOfOrder" required>

            <!-- Lead Time From Supplier -->
            <label>Lead Time From Supplier (in days):</label>
            <input class="form-control" type="number" name="LeadTimeFromSupplier" id="LeadTimeFromSupplier" required>

            <!-- Placed By User ID -->
            <label>Placed By User ID:</label>
            <input class="form-control" type="number" name="PlacedByUserId" id="placedByUserIdInput"
              value="<%= JSON.stringify(user.userId) %>" readonly>


            <!-- Placed By User ID -->
            <label>Placed by Username</label>
            <input class="form-control" type="text" name="UserName" id="placedByUserIdInput"
              value="<%= JSON.stringify(user.username) %>" readonly>



            <!-- Order Date -->
            <label>Order Date:</label>
            <input class="form-control" type="date" name="OrderDate" id="OrderDate">

            <!-- Expected Delivery Date -->
            <label>Expected Delivery Date:</label>
            <input class="form-control" type="date" name="ExpectedDeliveryDate" id="ExpectedDeliveryDate">

            <!-- Ordered Products List (Simplified for the sake of example) -->
            <label>Pieces Ordered:</label>
            <input class="form-control" type="number" name="unitsOrdered" id="quantity" placeholder="unitsOrdered">

            <label> Item OrderId:</label>
            <input class="form-control" type="number" name="itemOrder" id="itemOrder" placeholder="unitsOrdered">


            <label> Product OrderId:</label>
            <input class="form-control" type="number" name="productOrder" id="productOrder" placeholder="unitsOrdered">


            <button style="width: 200px;height: 40px  ; margin: 1rem auto;" class="btn" type="button" name="submitOrder"
              id="submitOrder">
              Place Order To DC
            </button>
          </form>

        </div>
      </div>





    </div>
    </div>

    </div>



    <script>


      // Open the modal
      function OpenModal() {
        modal.style.display = 'block';
        showItemRecommendation()

      }


      // Open the modal
      function OpenModalProduct() {
        modalTwo.style.display = 'block';
        showRecommendation()
      }


      // First, define the products variable
      const products = JSON.parse('<%- JSON.stringify(Products) %>'); // Convert EJS variable to JS
      const items = JSON.parse('<%- JSON.stringify(Items) %>');
      const userName = JSON.parse('<%- JSON.stringify(user) %>');





      let modal = document.getElementById('myModalItem');
      let modalTwo = document.getElementById('myModalProduct');
      let modalThree = document.getElementById('confirmOrder');

      function populateAndShowModal(data) {
        CloseModalItem();
        CloseModalProduct();

        console.log(data);

        // Show the modal
        document.getElementById('confirmOrder').style.display = 'block';

        // For Product
        document.getElementById('quantity').value = data.totalPiecesOrdered;
        console.log(data.totalPiecesOrdered);
        document.getElementById('TotalCostOfOrder').value = data.totalCostOfOrder || '';

        // Check the data to determine which has returned and set the order id accordingly
        if (data.orderedProductId && data.orderedProductId !== 0) {
          document.getElementById('productOrder').value = data.orderedProductId;
          document.getElementById('itemOrder').value = ''; // Clear the other field
        } else if (data.orderedItemId && data.orderedItemId !== 0) {
          document.getElementById('itemOrder').value = data.orderedItemId;
          document.getElementById('productOrder').value = ''; // Clear the other field
        } else {
          // Handle the case where neither ID is valid. For example, setting a default value or leaving it empty.
          document.getElementById('productOrder').value = '';
          document.getElementById('itemOrder').value = '';
        }

        document.getElementById('OrderDate').value = data.orderDate ? (new Date(data.orderDate)).toISOString().split('T')[0] : ''; // Convert datetime to date format
      }




      function CloseModalItem() {
        modal.style.display = 'none';
      }

      function CloseModalProduct() {
        modalTwo.style.display = 'none';
      }


      function CloseModalOrder() {
        modalThree.style.display = 'none';
      }


      document.getElementById('LeadTimeFromSupplier').addEventListener('change', function () {
        const leadTime = parseInt(this.value);
        if (!isNaN(leadTime)) {
          const currentDate = new Date();
          currentDate.setDate(currentDate.getDate() + leadTime); // Add lead time to current date

          // Convert date to the format YYYY-MM-DD which is expected by date inputs
          const dateString = currentDate.toISOString().split('T')[0];

          document.getElementById('ExpectedDeliveryDate').value = dateString;
        }
      });


      function getStatusText(statusNumber) {
        const statuses = ['Pending', 'Shipped', 'Received', 'Cancelled'];
        return statuses[statusNumber] || 'Unknown';
      }

      document.getElementById('ProductOrderForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        // Creating A Dto To Send The Data
        const formData = {
          productId: parseInt(document.getElementById('productId').value),
          unitsOrdered: parseInt(document.getElementById('unitsOrdered').value),
          piecesPerUnit: parseInt(document.getElementById('piecesPerUnit').value),
          orderDate: document.getElementById('orderDate').value,
          totalCostOfOrder: parseFloat(document.getElementById('totalCostOfOrder').value),
        };

        const result = await sendData('/submitProductOrder', formData);

        if (result) {
          populateAndShowModal(result);
        } else {
          alert('Error placing the product order.');
        }
      });

      document.getElementById('ItemOrderForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        let form = document.getElementById('ItemOrderForm');
        let formData = {};

        // Extract data from each element in the form
        for (let element of form.elements) {
          if (element.name) {
            if (element.type === "number" || element.type === "range") {
              formData[element.name] = parseFloat(element.value);
            } else if (element.type === "checkbox" || element.type === "radio") {
              formData[element.name] = element.checked;
            } else {
              formData[element.name] = element.value;
            }
          }
        }



        const result = await sendData('/submitItemOrder', formData);

        if (result) {
          populateAndShowModal(result);
        } else {
          alert('Error placing the item order.');
        }
      });

      document.getElementById('submitOrder').addEventListener('click', async () => {
        const form = document.querySelector('#confirmOrder form');

        let orderedProductId = parseInt(form.productOrder.value);
        if (isNaN(orderedProductId)) {
          orderedProductId = 0;
        }

        let orderedItemId = parseInt(form.itemOrder.value);
        if (isNaN(orderedItemId)) {
          orderedItemId = 0;
        }

        const formData = {
          supplierId: parseInt(form.SupplierId.value),
          totalCostOfOrder: parseFloat(form.TotalCostOfOrder.value),
          leadTimeFromSupplier: parseInt(form.LeadTimeFromSupplier.value),
          expectedDeliveryDate: form.ExpectedDeliveryDate.value,
          placedByUserId: parseInt(form.PlacedByUserId.value),
          orderedProductId: orderedProductId,
          orderedItemId: orderedItemId,
        };

        console.log(formData)
        const result = await sendData('/submitSupplierOrder', formData);

        if (result) {
          location.reload(); // This will refresh the page.
        } else {
          alert('Error submitting the order.');
        }
      });


      async function sendData(endpoint, data) {
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (response.status === 200) {
          return await response.json();
        } else {
          console.error(await response.text());
          return null;
        }
      }

      function showItemRecommendation() {
        const itemId = document.getElementById('itemId').value;
        const selectedItemName = document.getElementById('itemId').options[document.getElementById('itemId').selectedIndex].text;
        const item = items.find(i => i.itemId == itemId);

        // Validate the item name
        if (item.itemName !== selectedItemName) {
          console.error('Mismatched item name!');
          return;
        }

        // Calculate the recommended order amount
        const recommendedMinOrder = Math.max(0, item.minimumThreshold - item.unitsInInventory);
        const recommendedMaxOrder = Math.max(0, item.maximumThreshold - item.unitsInInventory);

        let recommendationText = `
              <strong>Item Name:</strong> ${item.itemName} <br>
                <strong>Units In Inventory:</strong> ${item.unitsInInventory} <br>
                  <span class="material-symbols-outlined">
                    lightbulb
                  </span> Based on the current stock and thresholds, you should order between
                  <strong>${recommendedMinOrder}</strong> and
                  <strong>${recommendedMaxOrder}</strong> units.
                  `;

        document.getElementById('itemRecommendationSection').innerHTML = recommendationText;
        document.getElementById('itemRecommendationSection').style.display = 'block';
      }


      function showRecommendation() {
        const productId = document.getElementById('productId').value;
        const selectedProductName = document.getElementById('productId').options[document.getElementById('productId').selectedIndex].text;
        const product = products.find(p => p.productId == productId);

        // Validate the product name
        if (product.productName !== selectedProductName) {
          console.error('Mismatched product name!');
          return;
        }

        let recommendationText = `
                  <strong>Product Name:</strong> ${product.productName} <br>
                    <strong>Units In Inventory:</strong> ${product.unitsInInventory} <br>
                      <div style="margin:1rem;display:flex;gap:10px">            <span class="material-symbols-outlined" style="display:flex;align-items:center">
                        batch_prediction
                      </span> <div>Based on the current stock and thresholds, you should order between
                          <strong>${Math.max(0, product.minimumThreshold - product.unitsInInventory)}</strong> and
                          <strong>${Math.max(0, product.maximumThreshold - product.unitsInInventory)}</strong> units. </div> </div>
        
                      `;

        document.getElementById('recommendationSection').innerHTML = recommendationText;
        document.getElementById('recommendationSection').style.display = 'block';
      }



      async function confirmOrder(orderId) {
        try {
          const response = await fetch('/confirmOrder', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId }),
          });

          const data = await response.json();

          if (response.ok) {
            alert(data.message);
            window.location.reload();
          } else {
            alert(`Failed to confirm order: ${data.message}`);
          }
        } catch (error) {
          alert(`Failed to confirm order: ${error.message}`);
        }
      }


    </script>


</body>



</html>